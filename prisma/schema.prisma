// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MERCHANT
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILURE
}

enum TransactionType {
  INCOMING
  OUTGOING
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String?  @unique
  did       String   @unique 
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  
  // Relations
  wallet       Wallet?
  merchantForm MerchantForm?
  transactions Transaction[]
  gasFees      GasFee[]
}

model Wallet {
  id            String @id @unique
  walletAddress String @unique
  
  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  transactions Transaction[]
  gasFees      GasFee[]
}

model MerchantForm {
  id               String  @id @default(uuid())
  businessName     String
  businessCategory String
  profileImage     String?
  
  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String            @id @default(uuid())
  amount    Float
  sender    String            // Will store name resolved from wallet address
  receiver  String            // Will store name resolved from wallet address
  timestamp DateTime          @default(now())
  status    TransactionStatus @default(PENDING)
  type      TransactionType
  title     String?
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])
  
  @@index([userId])
  @@index([walletId])
  @@index([timestamp])
}

model GasFee {
  id            String   @id @default(uuid())
  amount        Float
  timestamp     Int      // Unix epoch timestamp
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  walletAddress String
  wallet        Wallet   @relation(fields: [walletAddress], references: [walletAddress])
  
  @@index([userId])
  @@index([walletAddress])
  @@index([timestamp])
}